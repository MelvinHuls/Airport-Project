<?xml version="1.0" encoding="UTF-8"?>
<!-- JBoss, Home of Professional Open Source Copyright 2013, Red Hat, Inc. 
	and/or its affiliates, and individual contributors by the @authors tag. See 
	the copyright.txt in the distribution for a full listing of individual contributors. 
	Licensed under the Apache License, Version 2.0 (the "License"); you may not 
	use this file except in compliance with the License. You may obtain a copy 
	of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
        version="2.1">

    <persistence-unit name="MyTestPersistenceUnit" transaction-type="RESOURCE_LOCAL">    
		<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>

		<!-- Sadly, we have to add each Entity here (only needed for the persistence.xml 
			in src/test/java. This is due to the fact that JPA only scans automatically 
			in the classpath root where its persistence.xml is found. Thus when loading 
			JPA using this persistence.xml (in the unit tests), it does not 'see' the 
			entities from src/main/java because they are in another source root. Currently 
			haven't found an elegant way around this. -->
		<class>com.realdolmen.test.Person</class>
		<class>com.realdolmen.domain.User</class>
		<class>com.realdolmen.domain.Partner</class>

		<properties>
			<property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect" />

			<!-- Using create (is really drop-create) is better than create-drop, 
				because this way you can still see the final results in the database after 
				running the unit tests. Also cleanup should be done _before_ running unit 
				tests because otherwise you assume the previous run has been successful. 
				If this was not the case, you would end up in a fail-cascade because the 
				next run would fail due to the previous one not cleaning up correctly. -->
			<property name="hibernate.hbm2ddl.auto" value="update" />

			<!-- The default transaction isolation level of java.sql.Connection is 
				to use the used DBMS's default. Using MySQL, this is to use REPEATABLE_READ 
				which is usually a sensible value for production environments. However, in 
				a unit test this can occasionally backfire, because it becomes difficult 
				for a transaction spawned in a test to "see" the values of another (already 
				committed) transaction (under test) to perform asserts on. This is why we 
				set lower the isolation level just a notch to READ_COMMITTED. The test will 
				still only see changes that the system under test has committed (thus preventing 
				a false-positive assertion, but allows the testing transaction to see the 
				changes they are interested in seeing to happen. Note that we only use this 
				on the test persistence.xml! -->
			<property name="hibernate.connection.isolation" value="TRANSACTION_READ_COMMITTED" />
		</properties>
	</persistence-unit>
</persistence>
